;/*****************************************************
;Можно использовать для тестирования Arduino на мигание
;светодиодом и тактирование 16 мгц
;
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 02.01.2019
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;//#include <alcd.h>   // для LCD от CWision
;#define Tstep 1000          //по достжению  (int Tcountint Tcount=Tstep) * время прерыв [TIM0_OVF] = время 1 сек
;#define Testled PORTB.5     // тестовый св-диод на плате arduino
;
;#define mks_after_com 4  //4 ms Хотя даташит, требует задержку не менее 40мкс
;#define mks_strobe    5   //задержку для стробирующего импульса, подбирается опытным путем,
;						// 5 мкс было достаточной длительностью для данного LCD.
;
;#define RS  PORTB.0
;#define E   PORTB.1
;#define D4  PORTD.4
;#define D5  PORTD.5
;#define D6  PORTD.6
;#define D7  PORTD.7 //9877654321
;int Tcount = 0;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)  //прерывание по переполнению на 1 мс
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033 //----------- Reinitialize Timer 0x06 value for the interrapt 1 ms
; 0000 0034 TCNT0=0x06;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0035 // Place your code here
; 0000 0036 Tcount+=1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0037 if (Tcount == Tstep) {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0038 Tcount = 0;                // обнуление для 1 секунды шага
;PCODE: $00000017 VOL: 0
; 0000 0039  Testled^=1;               //инвертировать светодиод
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A };
;PCODE: $00000024 VOL: 0
; 0000 003B //-----------------------------------------------------------------
; 0000 003C }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;unsigned char adc_data;
;#define ADC_VREF_TYPE 0x60
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0043 {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0044 // Read the 8 most significant bits
; 0000 0045 // of the AD conversion result
; 0000 0046 adc_data=ADCH;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0047 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;// with noise canceling
;unsigned char read_adc(unsigned char adc_input)
; 0000 004D {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000031 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004F // Delay needed for the stabilization of the ADC input voltage
; 0000 0050 delay_us(10);
;PCODE: $00000035 VOL: 0
; 0000 0051 #asm
;PCODE: $00000036 VOL: 0
; 0000 0052     in   r30,mcucr
    in   r30,mcucr
;PCODE: $00000037 VOL: 0
; 0000 0053     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $00000038 VOL: 0
; 0000 0054     sbr  r30,__se_bit | __sm_adc_noise_red
    sbr  r30,__se_bit | __sm_adc_noise_red
;PCODE: $00000039 VOL: 0
; 0000 0055     out  mcucr,r30
    out  mcucr,r30
;PCODE: $0000003A VOL: 0
; 0000 0056     sleep
    sleep
;PCODE: $0000003B VOL: 0
; 0000 0057     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $0000003C VOL: 0
; 0000 0058     out  mcucr,r30
    out  mcucr,r30
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0059 #endasm
; 0000 005A return adc_data;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005B }
;PCODE: $00000042 VOL: 0
;//void send_LCD(char RS_value,char DB4_value,char DB5_value,char DB6_value,char DB7_value) {
;//int t;
;//}
;//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
;void lcd_dat(unsigned char x){
; 0000 0060 void lcd_dat(unsigned char x){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0061 int t;
; 0000 0062 RS=E=1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;	x -> Y+2
;	t -> R16,R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0063 PORTD |=0x0F;  //обнул старш пб-та
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0064 PORTD |=(x & 0xF0); // запись ст пб в порт
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0065 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;void lcd_com(unsigned char x){
; 0000 0066 void lcd_com(unsigned char x){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0067 int t;
; 0000 0068 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;void lcd_init(void){
; 0000 0069 void lcd_init(void){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 006A int t;
; 0000 006B }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;//...............................................................................
;// Declare your global variables here
;char Fled = 0; // флаг для свтда
;char Foldled = 0; // флаг для свтда
;
;void main(void)
; 0000 0072 {
;PCODE: $00000060 VOL: 0
; 0000 0073 // Declare your local variables here
; 0000 0074 
; 0000 0075 // Input/Output Ports initialization
; 0000 0076 // Port B initialization
; 0000 0077 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0078 // State7=T State6=T State5=T State4=T State3=T State2=P State1=0 State0=0
; 0000 0079 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 007A // State7=T State6=T State5=0 State4=T State3=T State2=P State1=0 State0=0
; 0000 007B PORTB=0x04;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007C DDRB=0x23;//DDRB=0x03;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007D 
; 0000 007E // Port C initialization
; 0000 007F // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0080 // State6=P State5=P State4=P State3=P State2=P State1=P State0=T
; 0000 0081 PORTC=0x7E;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0082 DDRC=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0083 
; 0000 0084 // Port D initialization
; 0000 0085 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0086 // State7=0 State6=0 State5=0 State4=0 State3=P State2=P State1=P State0=P
; 0000 0087 PORTD=0x0F;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0088 DDRD=0xF0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0089 
; 0000 008A // Timer/Counter 0 initialization
; 0000 008B // Clock source: System Clock
; 0000 008C // Clock value: 250,000 kHz
; 0000 008D TCCR0=0x03;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 008E TCNT0=0x06;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 008F 
; 0000 0090 // Timer/Counter 1 initialization
; 0000 0091 // Clock source: System Clock
; 0000 0092 // Clock value: Timer1 Stopped
; 0000 0093 // Mode: Normal top=0xFFFF
; 0000 0094 // OC1A output: Discon.
; 0000 0095 // OC1B output: Discon.
; 0000 0096 // Noise Canceler: Off
; 0000 0097 // Input Capture on Falling Edge
; 0000 0098 // Timer1 Overflow Interrupt: Off
; 0000 0099 // Input Capture Interrupt: Off
; 0000 009A // Compare A Match Interrupt: Off
; 0000 009B // Compare B Match Interrupt: Off
; 0000 009C TCCR1A=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009D TCCR1B=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009E TCNT1H=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 009F TCNT1L=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A0 ICR1H=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A1 ICR1L=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A2 OCR1AH=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A3 OCR1AL=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A4 OCR1BH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A5 OCR1BL=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 2 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer2 Stopped
; 0000 00AA // Mode: Normal top=0xFF
; 0000 00AB // OC2 output: Disconnected
; 0000 00AC ASSR=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00AD TCCR2=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00AE TCNT2=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00AF OCR2=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B0 
; 0000 00B1 // External Interrupt(s) initialization
; 0000 00B2 // INT0: Off
; 0000 00B3 // INT1: Off
; 0000 00B4 MCUCR=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B5 
; 0000 00B6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B7 TIMSK=0x01;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B8 
; 0000 00B9 // USART initialization
; 0000 00BA // USART disabled
; 0000 00BB UCSRB=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00BC 
; 0000 00BD // Analog Comparator initialization
; 0000 00BE // Analog Comparator: Off
; 0000 00BF // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C0 ACSR=0x80;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00C1 SFIOR=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00C2 
; 0000 00C3 // ADC initialization
; 0000 00C4 // ADC Clock frequency: 125,000 kHz
; 0000 00C5 // ADC Voltage Reference: AVCC pin
; 0000 00C6 // Only the 8 most significant bits of
; 0000 00C7 // the AD conversion result are used
; 0000 00C8 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00C9 ADCSRA=0x8F;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00CA 
; 0000 00CB // SPI initialization
; 0000 00CC // SPI disabled
; 0000 00CD SPCR=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CE 
; 0000 00CF // TWI initialization
; 0000 00D0 // TWI disabled
; 0000 00D1 TWCR=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D2 
; 0000 00D3 // Alphanumeric LCD initialization
; 0000 00D4 // Connections are specified in the
; 0000 00D5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D6 // RS - PORTB Bit 0
; 0000 00D7 // RD - PORTB Bit 3
; 0000 00D8 // EN - PORTB Bit 1
; 0000 00D9 // D4 - PORTD Bit 4
; 0000 00DA // D5 - PORTD Bit 5
; 0000 00DB // D6 - PORTD Bit 6
; 0000 00DC // D7 - PORTD Bit 7
; 0000 00DD // Characters/line: 16
; 0000 00DE //lcd_init(16);      //врем откл т к переключало самостоятельно порты (В5)?
; 0000 00DF 
; 0000 00E0 // Global enable interrupts
; 0000 00E1 #asm("sei")
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0000 00E2 
; 0000 00E3 while (1)
;PCODE: $000000A1 VOL: 0
; 0000 00E4       {
; 0000 00E5       // Place your code here
; 0000 00E6       #asm("cli")		// запретим прерывания
;PCODE: $000000A2 VOL: 0
	cli
;PCODE: $000000A3 VOL: 0
; 0000 00E7 		delay_us(150); 	// сгенерируем задержку 150 мкс
;PCODE: $000000A4 VOL: 0
; 0000 00E8 		//...
; 0000 00E9 		delay_ms(15); 	// сгенерируем задержку 15 мс
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00EA 		#asm("sei")		// разрешим прерывания
;PCODE: $000000A8 VOL: 0
	sei
;PCODE: $000000A9 VOL: 0
; 0000 00EB 
; 0000 00EC 
; 0000 00ED 
; 0000 00EE       }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00EF }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
